{"ast":null,"code":"var _jsxFileName = \"C:\\\\projetos\\\\netflixclone\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './componentes/MovieRow';\nimport FeaturedMovie from './componentes/FeaturedMovie';\nimport Header from './componentes/Header';\nexport default (() => {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      //Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); //Pegando o filme em destaque Fwatured\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let radomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[radomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(true);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    black: blackHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), featuredData && /*#__PURE__*/React.createElement(FeaturedMovie, {\n    item: featuredData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"lists\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, movieList.map((item, key) => /*#__PURE__*/React.createElement(MovieRow, {\n    key: key,\n    title: item.title,\n    items: item.items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }))));\n});","map":{"version":3,"sources":["C:/projetos/netflixclone/src/App.js"],"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","Header","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","radomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","addEventListener","removeEventListener","map","item","key","title"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,gBAAe,MAAM;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMY,OAAO,GAAG,YAAW;AACzB;AACA,UAAIC,IAAI,GAAG,MAAMX,IAAI,CAACY,WAAL,EAAjB;AACAP,MAAAA,YAAY,CAACM,IAAD,CAAZ,CAHyB,CAKzB;;AACA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAEA,CAAC,CAACC,IAAF,KAAW,WAA1B,CAAhB;AACA,UAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAmC,CAApD,CAAX,CAAlB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,WAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAMzB,IAAI,CAAC0B,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AACApB,MAAAA,eAAe,CAACkB,UAAD,CAAf;AACD,KAXD;;AAaAf,IAAAA,OAAO;AAER,GAhBQ,EAgBN,EAhBM,CAAT;AAkBEZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,cAAc,GAAG,MAAM;AAC3B,UAAGC,MAAM,CAACC,OAAP,GAAiB,EAApB,EAAuB;AACrBrB,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OAFD,MAEK;AACHA,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,KAND;;AAQAoB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AACA,WAAM,MAAM;AACVC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeF,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEpB,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIGF,YAAY,iBACX,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEA,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAQE;AAAS,IAAA,SAAS,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,CAAC6B,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACb,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,GAAf;AAAoB,IAAA,KAAK,EAAED,IAAI,CAACE,KAAhC;AAAuC,IAAA,KAAK,EAAEF,IAAI,CAACb,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CARF,CADF;AAgBD,CAvDD","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './componentes/MovieRow';\nimport FeaturedMovie from './componentes/FeaturedMovie';\nimport Header from './componentes/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() =>{\n    const loadAll = async () =>{\n      //Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o filme em destaque Fwatured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let radomChosen = Math.floor(Math.random() * (originals[0].items.results.length -1));\n      let chosen = originals[0].items.results[radomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n\n    loadAll();\n\n  }, []);\n\n    useEffect(() => {\n      const scrollListener = () => {\n        if(window.scrollY > 10){\n          setBlackHeader(true);\n        }else{\n          setBlackHeader(true);\n        }\n      }\n\n      window.addEventListener('scroll', scrollListener);\n      return() => {\n        window.removeEventListener('scroll', scrollListener);\n      }\n    }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}